public class Solution {
    public int totalNQueens(int n) {
		int[] res = new int[1];
		res[0] = 0;
		int[] flag_col = new int[n];
		int[] flag_45 = new int[2 * n - 1];
		int[] flag_135 = new int[2 * n - 1];

		totalNQueens(res, 0, n, flag_col, flag_45, flag_135);
		return res[0];
	}

	private void totalNQueens(int[] res, int row, int n, int[] flag_col, int[] flag_45,
			int[] flag_135) {

		if (row == n) {
			res[0] += 1;
			return;
		}
		for (int col = 0; col != n; ++col) {
			if (flag_col[col] == 0 && flag_45[row + col] == 0 && flag_135[n - 1 + col - row] == 0) {
				flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 1;
				totalNQueens(res, row + 1, n, flag_col, flag_45, flag_135);
				flag_col[col] = flag_45[row + col] = flag_135[n - 1 + col - row] = 0;
			}
		}
	}
}


//同样思路，代码简化
public class Solution {
    int count = 0;
    public int totalNQueens(int n) {
        boolean[] cols = new boolean[n];     // columns   |
        boolean[] d1 = new boolean[2 * n];   // diagonals \
        boolean[] d2 = new boolean[2 * n];   // diagonals /
        backtracking(0, cols, d1, d2, n);
        return count;
    }
    
    public void backtracking(int row, boolean[] cols, boolean[] d1, boolean []d2, int n) {
        if(row == n) count++;

        for(int col = 0; col < n; col++) {
            int id1 = col - row + n;
            int id2 = col + row;
            if(cols[col] || d1[id1] || d2[id2]) continue;
            
            cols[col] = true; d1[id1] = true; d2[id2] = true;
            backtracking(row + 1, cols, d1, d2, n);
            cols[col] = false; d1[id1] = false; d2[id2] = false;
        }
    }
}
